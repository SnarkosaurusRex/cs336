Lab 8 - Exercise 8.2

a.) Explain:

i.) the component structure of the application. What makes the UI composable and why does this matter?
	It's composable in that you can return a tree of components rather than just basic HTML. This matters because being composable is a key idea of maintainable frontends.

ii.) what JSX does.
	JSX is basically syntactic sugar - it lets you write XML-ish stuff in JavaScript, and then the JSX compiler automatically rewrites HTML tags to React.createElement(tagName) expressions in order to prevent polluting the global namespace.

iii.) why ReactJS is safe with respect to XSS.
	Whatever is inputted won't be rendered out as HTML.

iv.) how the data flows through the components. How are comments loaded? created? saved.
	The server reads through comments.json and parses it into individual comments, which it sends to the app. The app loads those comments in via the CommentBox loadCommentsFromServer() method, which saves the commments into its state.
	When a user starts to type in the comment form, their input is saved into the form's state using onChange handlers as they type. When they Submit the new comment, the form clears, and the new comment data is sent as a request to the server. This happens via a callback to the parent's render method. At the same time, the new comment is optimistically appended to the visible list of comments, in order to make the app seem faster. The server handles the request and if it succeeds, it writes the new comment into comments.json, and then responds with the updated list for the app to display.

v.) the nature and purpose of props and state. Which is immutable and which is mutable and why does this distinction matter?
	Props are immutable; state is mutable. This distinction matters because props are passed from parents, but state is private to the component, and when its state is changed, the component re-renders itself.


b.) Consider the following, more detailed questions based on statements in the tutorial.

i.) Try editing the comments.json file (to add or remove a legal comment). What happens and why?
	The comments listed in the app change to reflect any changes made to comments.json because the app is configured to poll the server every 2 seconds (i.e. call loadCommentsFromServer()).

ii.) When the CommentBox has loaded comments from the server (in loadCommentsFromServer()), why doesn’t it call render() to make them visible?
	It doesn't need to call render() because it saves the comments loaded from the server into state (by calling this.setState()), which replaces the old array of comments with the new one, and the UI automatically updates itself.

iii.) Of what advantage, if any, is it to require that components always represent the current state of the view?
	It means that the state of the actual DOM won't differ from that of the component.

iv.) The app implements optimistic updates. Isn’t optimism here more like foolishness? What if the server rejects the new comment (for whatever reason)?
	Nah, it's fine - If the server rejects the new comment, then it won't get written into comments.json, and thus it'll disappear when the app next loads comments from the server (i.e. within 2 seconds).

